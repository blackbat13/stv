

Agent AI1:
init: start
%% ---Phase1: Gathering data---
start_gathering_data: start -> gather
gather_data: gather -[AI1_data<2]> gather [AI1_data+=1]
%% 1: Incomplete data
stop_gathering_data: gather -[AI1_data < 1]> data_ready [AI1_data=0, AI1_data_completion=1]
%% 2: Complete data
stop_gathering_data: gather -[1 <= AI1_data < 2]> data_ready [AI1_data=0, AI1_data_completion=2]
%% 3: Too much data
stop_gathering_data: gather -[2 <= AI1_data]> data_ready [AI1_data=0, AI1_data_completion=3]
skip_gathering_data: start -> data_ready
%% ---Phase2: Learning (building local model)---
start_learning: data_ready -> learn
keep_learning: learn -[AI1_information < 2]> learn [AI1_information+=AI1_data_completion]
%% 1: Incomplete model
stop_learning: learn -[AI1_information < 1 and AI1_model_quality > 0]> educated [AI1_information=0, AI1_model_status=1, AI1_model_quality-=1]
stop_learning: learn -[AI1_information < 1 and AI1_model_quality <= 0]> educated [AI1_information=0, AI1_model_status=1]
%% 2: Complete model
stop_learning: learn -[1 <= AI1_information < 2 and AI1_model_quality < 2]> educated [AI1_information=0, AI1_model_status=2, AI1_model_quality+=1]
stop_learning: learn -[1 <= AI1_information < 2 and AI1_model_quality >= 2]> educated [AI1_information=0, AI1_model_status=2]
%% 3: Overtrained model
stop_learning: learn -[2 <= AI1_information and AI1_model_quality > 0]> educated [AI1_information=0, AI1_model_status=3, AI1_model_quality-=1]
stop_learning: learn -[2 <= AI1_information and AI1_model_quality <= 0]> educated [AI1_information=0, AI1_model_status=3]
skip_learning: data_ready -> sharing
%% ---Phase3: Sharing local models---
start_sharing: educated -> sharing
%% Share local model and get average quality of both models
%% receive left
shared share_6_with_1: sharing -> sharing2 [AI1_model_quality=%AI6_model_quality]
%% send right
shared share_1_with_2: sharing2 -> sharing3 [AI2_model_quality=%AI1_model_quality]
end_sharing: sharing3 -> end
%% ---Phase4: End---
wait: end -> end
repeat: end -> learn


Agent AI2:
init: start
%% ---Phase1: Gathering data---
start_gathering_data: start -> gather
gather_data: gather -[AI2_data<2]> gather [AI2_data+=1]
%% 1: Incomplete data
stop_gathering_data: gather -[AI2_data < 1]> data_ready [AI2_data=0, AI2_data_completion=1]
%% 2: Complete data
stop_gathering_data: gather -[1 <= AI2_data < 2]> data_ready [AI2_data=0, AI2_data_completion=2]
%% 3: Too much data
stop_gathering_data: gather -[2 <= AI2_data]> data_ready [AI2_data=0, AI2_data_completion=3]
skip_gathering_data: start -> data_ready
%% ---Phase2: Learning (building local model)---
start_learning: data_ready -> learn
keep_learning: learn -[AI2_information < 2]> learn [AI2_information+=AI2_data_completion]
%% 1: Incomplete model
stop_learning: learn -[AI2_information < 1 and AI2_model_quality > 0]> educated [AI2_information=0, AI2_model_status=1, AI2_model_quality-=1]
stop_learning: learn -[AI2_information < 1 and AI2_model_quality <= 0]> educated [AI2_information=0, AI2_model_status=1]
%% 2: Complete model
stop_learning: learn -[1 <= AI2_information < 2 and AI2_model_quality < 2]> educated [AI2_information=0, AI2_model_status=2, AI2_model_quality+=1]
stop_learning: learn -[1 <= AI2_information < 2 and AI2_model_quality >= 2]> educated [AI2_information=0, AI2_model_status=2]
%% 3: Overtrained model
stop_learning: learn -[2 <= AI2_information and AI2_model_quality > 0]> educated [AI2_information=0, AI2_model_status=3, AI2_model_quality-=1]
stop_learning: learn -[2 <= AI2_information and AI2_model_quality <= 0]> educated [AI2_information=0, AI2_model_status=3]
skip_learning: data_ready -> sharing
%% ---Phase3: Sharing local models---
start_sharing: educated -> sharing
%% Share local model and get average quality of both models
%% send right
shared share_2_with_3: sharing -> sharing2 [AI3_model_quality=%AI2_model_quality]
%% receive left
shared share_1_with_2: sharing2 -> sharing3 [AI2_model_quality=%AI1_model_quality]
end_sharing: sharing3 -> end
%% ---Phase4: End---
wait: end -> end
repeat: end -> learn


Agent AI3:
init: start
%% ---Phase1: Gathering data---
start_gathering_data: start -> gather
gather_data: gather -[AI3_data<2]> gather [AI3_data+=1]
%% 1: Incomplete data
stop_gathering_data: gather -[AI3_data < 1]> data_ready [AI3_data=0, AI3_data_completion=1]
%% 2: Complete data
stop_gathering_data: gather -[1 <= AI3_data < 2]> data_ready [AI3_data=0, AI3_data_completion=2]
%% 3: Too much data
stop_gathering_data: gather -[2 <= AI3_data]> data_ready [AI3_data=0, AI3_data_completion=3]
skip_gathering_data: start -> data_ready
%% ---Phase2: Learning (building local model)---
start_learning: data_ready -> learn
keep_learning: learn -[AI3_information < 2]> learn [AI3_information+=AI3_data_completion]
%% 1: Incomplete model
stop_learning: learn -[AI3_information < 1 and AI3_model_quality > 0]> educated [AI3_information=0, AI3_model_status=1, AI3_model_quality-=1]
stop_learning: learn -[AI3_information < 1 and AI3_model_quality <= 0]> educated [AI3_information=0, AI3_model_status=1]
%% 2: Complete model
stop_learning: learn -[1 <= AI3_information < 2 and AI3_model_quality < 2]> educated [AI3_information=0, AI3_model_status=2, AI3_model_quality+=1]
stop_learning: learn -[1 <= AI3_information < 2 and AI3_model_quality >= 2]> educated [AI3_information=0, AI3_model_status=2]
%% 3: Overtrained model
stop_learning: learn -[2 <= AI3_information and AI3_model_quality > 0]> educated [AI3_information=0, AI3_model_status=3, AI3_model_quality-=1]
stop_learning: learn -[2 <= AI3_information and AI3_model_quality <= 0]> educated [AI3_information=0, AI3_model_status=3]
skip_learning: data_ready -> sharing
%% ---Phase3: Sharing local models---
start_sharing: educated -> sharing
%% Share local model and get average quality of both models
%% receive left
shared share_2_with_3: sharing -> sharing2 [AI3_model_quality=%AI2_model_quality]
%% send right
shared share_3_with_4: sharing2 -> sharing3 [AI4_model_quality=%AI3_model_quality]
end_sharing: sharing3 -> end
%% ---Phase4: End---
wait: end -> end
repeat: end -> learn


Agent AI4:
init: start
%% ---Phase1: Gathering data---
start_gathering_data: start -> gather
gather_data: gather -[AI4_data<2]> gather [AI4_data+=1]
%% 1: Incomplete data
stop_gathering_data: gather -[AI4_data < 1]> data_ready [AI4_data=0, AI4_data_completion=1]
%% 2: Complete data
stop_gathering_data: gather -[1 <= AI4_data < 2]> data_ready [AI4_data=0, AI4_data_completion=2]
%% 3: Too much data
stop_gathering_data: gather -[2 <= AI4_data]> data_ready [AI4_data=0, AI4_data_completion=3]
skip_gathering_data: start -> data_ready
%% ---Phase2: Learning (building local model)---
start_learning: data_ready -> learn
keep_learning: learn -[AI4_information < 2]> learn [AI4_information+=AI4_data_completion]
%% 1: Incomplete model
stop_learning: learn -[AI4_information < 1 and AI4_model_quality > 0]> educated [AI4_information=0, AI4_model_status=1, AI4_model_quality-=1]
stop_learning: learn -[AI4_information < 1 and AI4_model_quality <= 0]> educated [AI4_information=0, AI4_model_status=1]
%% 2: Complete model
stop_learning: learn -[1 <= AI4_information < 2 and AI4_model_quality < 2]> educated [AI4_information=0, AI4_model_status=2, AI4_model_quality+=1]
stop_learning: learn -[1 <= AI4_information < 2 and AI4_model_quality >= 2]> educated [AI4_information=0, AI4_model_status=2]
%% 3: Overtrained model
stop_learning: learn -[2 <= AI4_information and AI4_model_quality > 0]> educated [AI4_information=0, AI4_model_status=3, AI4_model_quality-=1]
stop_learning: learn -[2 <= AI4_information and AI4_model_quality <= 0]> educated [AI4_information=0, AI4_model_status=3]
skip_learning: data_ready -> sharing
%% ---Phase3: Sharing local models---
start_sharing: educated -> sharing
%% Share local model and get average quality of both models
%% send right
shared share_4_with_5: sharing -> sharing2 [AI5_model_quality=%AI4_model_quality]
%% receive left
shared share_3_with_4: sharing2 -> sharing3 [AI4_model_quality=%AI3_model_quality]
end_sharing: sharing3 -> end
%% ---Phase4: End---
wait: end -> end
repeat: end -> learn


Agent AI5:
init: start
%% ---Phase1: Gathering data---
start_gathering_data: start -> gather
gather_data: gather -[AI5_data<2]> gather [AI5_data+=1]
%% 1: Incomplete data
stop_gathering_data: gather -[AI5_data < 1]> data_ready [AI5_data=0, AI5_data_completion=1]
%% 2: Complete data
stop_gathering_data: gather -[1 <= AI5_data < 2]> data_ready [AI5_data=0, AI5_data_completion=2]
%% 3: Too much data
stop_gathering_data: gather -[2 <= AI5_data]> data_ready [AI5_data=0, AI5_data_completion=3]
skip_gathering_data: start -> data_ready
%% ---Phase2: Learning (building local model)---
start_learning: data_ready -> learn
keep_learning: learn -[AI5_information < 2]> learn [AI5_information+=AI5_data_completion]
%% 1: Incomplete model
stop_learning: learn -[AI5_information < 1 and AI5_model_quality > 0]> educated [AI5_information=0, AI5_model_status=1, AI5_model_quality-=1]
stop_learning: learn -[AI5_information < 1 and AI5_model_quality <= 0]> educated [AI5_information=0, AI5_model_status=1]
%% 2: Complete model
stop_learning: learn -[1 <= AI5_information < 2 and AI5_model_quality < 2]> educated [AI5_information=0, AI5_model_status=2, AI5_model_quality+=1]
stop_learning: learn -[1 <= AI5_information < 2 and AI5_model_quality >= 2]> educated [AI5_information=0, AI5_model_status=2]
%% 3: Overtrained model
stop_learning: learn -[2 <= AI5_information and AI5_model_quality > 0]> educated [AI5_information=0, AI5_model_status=3, AI5_model_quality-=1]
stop_learning: learn -[2 <= AI5_information and AI5_model_quality <= 0]> educated [AI5_information=0, AI5_model_status=3]
skip_learning: data_ready -> sharing
%% ---Phase3: Sharing local models---
start_sharing: educated -> sharing
%% Share local model and get average quality of both models
%% receive left
shared share_4_with_5: sharing -> sharing2 [AI5_model_quality=%AI4_model_quality]
%% send right
shared share_5_with_6: sharing2 -> sharing3 [AI6_model_quality=%AI5_model_quality]
end_sharing: sharing3 -> end
%% ---Phase4: End---
wait: end -> end
repeat: end -> learn


Agent AI6:
init: start
%% ---Phase1: Gathering data---
start_gathering_data: start -> gather
gather_data: gather -[AI6_data<2]> gather [AI6_data+=1]
%% 1: Incomplete data
stop_gathering_data: gather -[AI6_data < 1]> data_ready [AI6_data=0, AI6_data_completion=1]
%% 2: Complete data
stop_gathering_data: gather -[1 <= AI6_data < 2]> data_ready [AI6_data=0, AI6_data_completion=2]
%% 3: Too much data
stop_gathering_data: gather -[2 <= AI6_data]> data_ready [AI6_data=0, AI6_data_completion=3]
skip_gathering_data: start -> data_ready
%% ---Phase2: Learning (building local model)---
start_learning: data_ready -> learn
keep_learning: learn -[AI6_information < 2]> learn [AI6_information+=AI6_data_completion]
%% 1: Incomplete model
stop_learning: learn -[AI6_information < 1 and AI6_model_quality > 0]> educated [AI6_information=0, AI6_model_status=1, AI6_model_quality-=1]
stop_learning: learn -[AI6_information < 1 and AI6_model_quality <= 0]> educated [AI6_information=0, AI6_model_status=1]
%% 2: Complete model
stop_learning: learn -[1 <= AI6_information < 2 and AI6_model_quality < 2]> educated [AI6_information=0, AI6_model_status=2, AI6_model_quality+=1]
stop_learning: learn -[1 <= AI6_information < 2 and AI6_model_quality >= 2]> educated [AI6_information=0, AI6_model_status=2]
%% 3: Overtrained model
stop_learning: learn -[2 <= AI6_information and AI6_model_quality > 0]> educated [AI6_information=0, AI6_model_status=3, AI6_model_quality-=1]
stop_learning: learn -[2 <= AI6_information and AI6_model_quality <= 0]> educated [AI6_information=0, AI6_model_status=3]
skip_learning: data_ready -> sharing
%% ---Phase3: Sharing local models---
start_sharing: educated -> sharing
%% Share local model and get average quality of both models
%% send right
shared share_6_with_1: sharing -> sharing2 [AI1_model_quality=%AI6_model_quality]
%% receive left
shared share_5_with_6: sharing2 -> sharing3 [AI6_model_quality=%AI5_model_quality]
end_sharing: sharing3 -> end
%% ---Phase4: End---
wait: end -> end
repeat: end -> learn


PERSISTENT: [AI1_information, AI1_data, AI1_data_completion, AI1_model_status, AI1_model_quality, AI2_information, AI2_data, AI2_data_completion, AI2_model_status, AI2_model_quality, AI3_information, AI3_data, AI3_data_completion, AI3_model_status, AI3_model_quality, AI4_information, AI4_data, AI4_data_completion, AI4_model_status, AI4_model_quality, AI5_information, AI5_data, AI5_data_completion, AI5_model_status, AI5_model_quality, AI6_information, AI6_data, AI6_data_completion, AI6_model_status, AI6_model_quality]
INITIAL: [AI1_information=0, AI1_data=0, AI1_data_completion=0, AI1_model_status=0, AI1_model_quality=0, AI2_information=0, AI2_data=0, AI2_data_completion=0, AI2_model_status=0, AI2_model_quality=0, AI3_information=0, AI3_data=0, AI3_data_completion=0, AI3_model_status=0, AI3_model_quality=0, AI4_information=0, AI4_data=0, AI4_data_completion=0, AI4_model_status=0, AI4_model_quality=0, AI5_information=0, AI5_data=0, AI5_data_completion=0, AI5_model_status=0, AI5_model_quality=0, AI6_information=0, AI6_data=0, AI6_data_completion=0, AI6_model_status=0, AI6_model_quality=0]
FORMULA: <<AI1>>F(AI1_model_quality>1 & AI2_model_quality>1 & AI3_model_quality>1 & AI4_model_quality>1 & AI5_model_quality>1 & AI6_model_quality>1)
SHOW_EPISTEMIC: False