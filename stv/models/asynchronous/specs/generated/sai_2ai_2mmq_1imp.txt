


Agent AI2:
init: start
%% ---Phase1: Gathering data---
start_gathering_data: start -> gather
gather_data: gather -[AI2_data<2]> gather [AI2_data+=1]
%% 1: Incomplete data
stop_gathering_data: gather -[AI2_data < 1]> data_ready [AI2_data=0, AI2_data_completion=1]
%% 2: Complete data
stop_gathering_data: gather -[1 <= AI2_data < 2]> data_ready [AI2_data=0, AI2_data_completion=2]
%% 3: Too much data
stop_gathering_data: gather -[2 <= AI2_data]> data_ready [AI2_data=0, AI2_data_completion=3]
skip_gathering_data: start -> data_ready
%% ---Phase2: Learning (building local model)---
start_learning: data_ready -> learn
keep_learning: learn -[AI2_information < 2]> learn [AI2_information+=AI2_data_completion]
%% 1: Incomplete model
stop_learning: learn -[AI2_information < 1 and AI2_model_quality > 0]> educated [AI2_information=0, AI2_model_status=1, AI2_model_quality-=1]
stop_learning: learn -[AI2_information < 1 and AI2_model_quality <= 0]> educated [AI2_information=0, AI2_model_status=1]
%% 2: Complete model
stop_learning: learn -[1 <= AI2_information < 2 and AI2_model_quality < 2]> educated [AI2_information=0, AI2_model_status=2, AI2_model_quality+=1]
stop_learning: learn -[1 <= AI2_information < 2 and AI2_model_quality >= 2]> educated [AI2_information=0, AI2_model_status=2]
%% 3: Overtrained model
stop_learning: learn -[2 <= AI2_information and AI2_model_quality > 0]> educated [AI2_information=0, AI2_model_status=3, AI2_model_quality-=1]
stop_learning: learn -[2 <= AI2_information and AI2_model_quality <= 0]> educated [AI2_information=0, AI2_model_status=3]
skip_learning: data_ready -> sharing
%% ---Phase3: Sharing local models---
start_sharing: educated -> sharing
%% Share local model and get average quality of both models
%% send right
shared share_2_with_1: sharing -> sharing2
%% receive left
shared share_1_with_2: sharing2 -> sharing3 [AI2_model_quality=^AI1_model_quality]
end_sharing: sharing3 -> end
%% ---Phase4: End---
wait: end -> end
repeat: end -> learn

%% Impersonator
Agent AI1:
init: start
set_quality_0: start -> set_quality [AI1_model_quality=0]
set_quality_1: start -> set_quality [AI1_model_quality=1]
set_quality_2: start -> set_quality [AI1_model_quality=2]
%% receive left
shared share_2_with_1: set_quality -> sharing
%% send right
shared share_1_with_2: sharing -> start


PERSISTENT: [AI1_information, AI1_data, AI1_data_completion, AI1_model_status, AI1_model_quality, AI2_information, AI2_data, AI2_data_completion, AI2_model_status, AI2_model_quality]
INITIAL: [AI1_information=0, AI1_data=0, AI1_data_completion=0, AI1_model_status=0, AI1_model_quality=0, AI2_information=0, AI2_data=0, AI2_data_completion=0, AI2_model_status=0, AI2_model_quality=0]
FORMULA: <<AI2>>F(AI2_model_quality>1)
SHOW_EPISTEMIC: False