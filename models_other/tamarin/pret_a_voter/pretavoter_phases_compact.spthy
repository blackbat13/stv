theory PretaVoterWithPhasesCompact
begin

builtins: multiset, asymmetric-encryption, xor

// Note: Every Out rule is used only for adversary

// ---------------- FUNCTIONS ----------------

functions: select/2, s/1

equations:
    select(s(zero), <x.1, x.2, x.3>) = x.1,
    select(s(s(zero)), <x.1, x.2, x.3>) = x.2,
    select(s(s(s(zero))), <x.1, x.2, x.3>) = x.3

// ---------------- RULES ----------------

// --- INITIAL GENERATION ---

rule InitialSetup:
    [
        Fr(~f)
    ]
  --[ InitialSetup(), RunOnce() ]->
    [
        // -- Generate Voters --
        Voter($V1),
        Voter($V2),
        Voter($V3),
        VoterI($V4), // Voter that interacts with the intruder

        // -- Generate Candidates --
        !Candidate('C1'),
        !Candidate('C2'),
        !Candidate('C3'),

        // -- Generate Counters --
        Counter('C1', zero), // Create counter for each candidate and assign zero to it
        Counter('C2', zero), // Counters are used for computing the result
        Counter('C3', zero),

        // -- Generate Choices --
        !Choice(s(zero)),
        !Choice(s(s(zero))),
        !Choice(s(s(s(zero)))),

        // -- Generate Ballots --
        Ballot($B1), // Ballot template used to generate actual ballot for casting
        Ballot($B2), // Generate as many ballot templates as voters
        Ballot($B3),
        Ballot($B4),

        !ElectionAuthority($E),
        !Sk($E, ~f),
        !Pk($E, pk(~f)),

        PhaseGeneration($A)
    ]

// --- BALLOT GENERATION ---

rule GenerateBallot:
    let
        onion = aenc(<C1, C2, C3, ~d>, pkE)
    in
    [
        PhaseGeneration(A), // Ensure that this is generation phase
        Ballot(B), // Get ballot template
        !Candidate(C1), // Get each candidate
        !Candidate(C2),
        !Candidate(C3),
        !ElectionAuthority(E),
        !Pk(E, pkE), // Public key of the election authority
        Fr(~d) // New fresh value used for encryption
    ]
  --[ GenerateBallot(B, C1, C2, C3, onion), GenerateBallotR() ]->
    [
        PhaseGeneration(A),
        BallotWithOrderAndOnion(B, C1, C2, C3, onion) // Add onion to the ballot
        // Order should be random, because tamarin will decide, which value assign to C1, C2, C3
    ]

// --- VOTE CASTING ---

rule CastVote:
    [
        PhaseCasting(A), // Ensure that this is casting phase
        !Choice(c), // Chose candidate: first, second or third
        Voter(V), // Voter casting his vote
        BallotWithOrderAndOnion(B, C1, C2, C3, onion) // Ballot given to the voter
    ]
  --[ CastVote(V, c, onion) ]->
    [
        PhaseCasting(A),
        Vote(c, onion), // Actual vote, used for publishing and counting
        Receipt(V, c, onion) // A receipt for voter to verify that his vote was casted properly
    ]

rule CastVoteI:
    let
        // ch = diff(ch1, ch2) // Two different voter choices should be indistinguishable from the intruder point of view
        ch = ch1
    in
    [
        In(ic), // Intruder candidate - instruction from the intruder for the voter
        PhaseCasting(A), // Ensure that this is casting phase
        !Choice(ch1), // Choice for voting freely
        !Choice(ch2), // Choice for voting as intruder commands
        VoterI(V), // Voter working with the intruder
        BallotWithOrderAndOnion(B, C1, C2, C3, onion) // Ballot given to the voter
    ]
  --[ CastVote(V, ch, onion), CastVoteI(V, ch, ic), Voted(select(ch, <C1, C2, C3>)), Eq(select(ch2, <C1, C2, C3>), ic) ]->
    [
        PhaseCasting(A),
        Vote(ch, onion), // Actual vote, used for publishing and counting
        Receipt(V, ch, onion), // A receipt for voter to verify that his vote was casted properly
        Out(<V, ch, onion>) // Information shared with the intruder
    ]


// --- VOTE PUBLISHING AND COUNTING ---

rule PublishAndCountVote:
    let
        chosen = select(selection, <C1, C2, C3>) // Get selected candidate from the onion order
        onion = aenc(<C1, C2, C3, d>, pk(skE))
    in
    [
        !ElectionAuthority(E), // Election authority, that has key for decrypting the onions
        !Sk(E, skE), // Private key of the election authority
        PhasePublishing(A), // Ensure that this is publishing phase
        Vote(selection, onion), // Casted vote
        Counter(chosen, x) // Counter for the candidate chosen in the counted vote
    ]
  --[ PublishVote(selection, onion), CountVote(chosen) ]->
    [
        PhasePublishing(A),
        !Board(selection, onion), // Publish vote on the bulletin board
        Counter(chosen, s(x))
    ]

// --- RESULT PUBLISHING ---

rule PublishResults:
    [
        PhaseResults(A), // Ensure that this is result publishing phase
        Counter(C, x) // Get counter for the candidate
    ]
  --[ PublishResult(C, x) ]->
    [
        PhaseResults(A),
        !Result(C, x), // Published result
        Out(<C, x>) // Send result, so intruder can learn it
    ]

// --- VERIFYING VOTES ---

rule VerifyVote:
    [
        Receipt(V, selection, onion), // Receipt form the casting phase
        !Board(selection, onion) // Information published on the bulletin board
    ]
  --[ VerifyVote(V, selection, onion) ]->
    [
    ]

// --- PHASE CHANGING ---

// Phase order: Generation -> Casting -> Publishing -> Results -> Verify

rule MoveToCasting:
    [
        PhaseGeneration(A)
    ]
  --[ MoveToCasting() ]->
    [
        PhaseCasting(A)
    ]

rule MoveToPublishing:
    [
        PhaseCasting(A)
    ]
  --[ MoveToPublishing() ]->
    [
        PhasePublishing(A)
    ]

rule MoveToResults:
    [
        PhasePublishing(A)
    ]
  --[ MoveToResults() ]->
    [
        PhaseResults(A)
    ]

rule MoveToVerify:
    [
        PhaseResults(A)
    ]
  --[ MoveToVerify() ]->
    [
        PhaseVerify(A)
    ]



// ---------------- RESTRICTIONS ----------------

restriction RunInitialSetupOnce:
  "All #i1 #i2. RunOnce() @i1 & RunOnce() @i2 ==> #i1=#i2"

restriction Unique:
  "All B C1 C2 C3 onion #i. GenerateBallot(B, C1, C2, C3, onion) @i ==> not(C1=C2 | C1=C3 | C2=C3)"

restriction Equality:
  "All x y #i. Eq(x,y) @i ==> x = y"

// ---------------- LEMMAS ----------------

lemma ResultsPublished:
  exists-trace
  " Ex x1 #i1.
        PublishResult('C1', x1) @ #i1
  "

lemma VoteSecrecy:
  "All C #i. (
    Voted(C) @ #i ==>
        not(Ex #j. K(C) @ #j)
    )
  "

lemma TemplatePhasesTrace:
  exists-trace
  " Ex #p1 #p2 #p3 #p4.
        MoveToCasting()    @ #p1 &
        MoveToPublishing() @ #p2 &
        MoveToResults()    @ #p3 &
        MoveToVerify()     @ #p4 &
        p1 < p2 & p2 < p3 & p3 < p4
  "

end