<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here.

// config variables
const int mt_total = 1; // # of mix tellers
const int dt_total = 1; // # of decr tellers  ( Shamir's Secret (2,3) )
const int v_total = 2; // # of voters

const int c_total = 2; // # of candidates
const int z_order = 7;

typedef int[0,c_total-1] c_t;
typedef int[0,v_total-1] v_t;
typedef int[0,z_order-1] z_t;

const z_t batch_rand[21][2] = {{0,1},{0,2},{0,3},{0,4},{0,5},{0,6},{1,2},{1,3},{1,4},{1,5},{1,6},{2,3},{2,4},{2,5},{2,6},{3,4},{3,5},{3,6},{4,5},{4,6},{5,6}};

const struct{
  z_t a; // alfa
  z_t b; // beta = alfa^k
}pk= { 3, 6 }; // public key for secret k=3

typedef struct{
  z_t y1, y2; // a pair of (a^r, m*(b^r)) where m=message, r=random
} Ciphertext;

const c_t C[c_total] = {0,1}; // candidate list

// naive power modulo calculation in Z_p
int zpow(z_t a, int b) // a^b mod p
{
  if(b==0){
    return 1;
  }else{
    z_t x=a;
    int i;
    if(b&lt;0)b=(z_order - 1)*(-b);
    b = b%(z_order - 1); // assuming p is prime
    for (i=1;i&lt;b;i++){
      x=(x*a)%z_order;
    }
    return x;
  }
}

typedef struct 
{ 
  Ciphertext o; // value of "onion" at the bottom of the strip
  c_t i; // index of cell with X
} Receipt;


typedef struct{
  Ciphertext onion;
  c_t cl[c_total]; // position -&gt; candidate
} Ballot;


const int P_b[2][c_total] = { 
  { 0,1 },
  { 1,0 }
};

const int P_c[2][c_total] = { 
  { 0,1 },
  { 1,0 }
};


//Coercer-Voter channels
chan punish1, not_punish1;
chan show1;
chan nshow1;

//Voter-Sys channels
chan cast;
chan record;
Receipt recorded;

const int b_cols = 1 + 2*mt_total + dt_total;  
const int b_rows = v_total;

typedef int[0,b_cols-1] b_j; // board col index 
typedef int[0,b_rows-1] b_i; // board row index

Ciphertext board[b_cols][b_rows]; // WBB
Ciphertext batch[b_rows]; // temporary column values storage

const int dlog[7]={-999,0,2,1,4,5,3};


Ballot ballots[v_total];
Receipt initial_batch[b_rows]; // "initial" column of WBB, in case of absorbed index may be hidden

Ciphertext encr(z_t m, int r){ // m = message, r = randomization factor
  Ciphertext c;
  
  c.y1 = zpow( pk.a, r);
  c.y2 = zpow( pk.b, r) * m % z_order;
  
  return c;
}

z_t decr(Ciphertext &amp;c, int key){
  return (c.y2 * zpow(c.y1, -key) )%z_order;
}


broadcast chan v_phase, m_phase, d_phase, c_phase;</declaration><template><name x="5" y="5">Voter1</name><declaration>// assosiate ballots[v_id] Ballot with each voter

Receipt receipt; // here onion is same as v_id

c_t chosen; // candidate whom voter thinks he voted for

c_t c_index(c_t target){
  for (cell_i: c_t){
    if ( ballots[0].cl[cell_i] == target ) return cell_i; // replace with my_ballot variable in next implementation
  }
  return -1; // results in rangeException throw
}</declaration><location id="id0" x="-3456" y="-96"><name x="-3466" y="-126">nshow_np_1</name></location><location id="id1" x="-2864" y="-96"><name x="-2874" y="-126">show_p_1</name></location><location id="id2" x="-3056" y="-96"><name x="-3066" y="-126">show_np_1</name></location><location id="id3" x="-3312" y="-96"><name x="-3322" y="-126">nshow_p_1</name></location><location id="id4" x="-2952" y="-264"><name x="-2962" y="-294">show_1</name></location><location id="id5" x="-3352" y="-264"><name x="-3362" y="-294">not_show_1</name></location><location id="id6" x="-3152" y="-440"><name x="-3162" y="-470">received_receipt_1</name></location><location id="id7" x="-3272" y="-616"><name x="-3282" y="-646">marked_choice_1</name></location><location id="id8" x="-4304" y="-80"><name x="-4314" y="-110">nshow_np_0</name></location><location id="id9" x="-4112" y="-88"><name x="-4122" y="-118">nshow_p_0</name></location><location id="id10" x="-3976" y="-104"><name x="-3986" y="-134">show_np_0</name></location><location id="id11" x="-3824" y="-104"><name x="-3834" y="-134">show_p_0</name></location><location id="id12" x="-4168" y="-224"><name x="-4178" y="-254">not_show_0</name></location><location id="id13" x="-3896" y="-240"><name x="-3906" y="-270">show_0</name></location><location id="id14" x="-3480" y="-784"><name x="-3456" y="-792">has_ballot</name></location><location id="id15" x="-3936" y="-440"><name x="-4056" y="-432">received_receipt_0</name></location><location id="id16" x="-3736" y="-632"><name x="-3784" y="-624">marked_choice_0</name></location><location id="id17" x="-3480" y="-896"><name x="-3520" y="-896">idle</name></location><init ref="id17"/><transition><source ref="id5"/><target ref="id0"/><label kind="synchronisation" x="-3504" y="-200">not_punish1?</label></transition><transition><source ref="id4"/><target ref="id1"/><label kind="synchronisation" x="-2896" y="-200">punish1?</label></transition><transition><source ref="id4"/><target ref="id2"/><label kind="synchronisation" x="-3096" y="-200">not_punish1?</label></transition><transition><source ref="id6"/><target ref="id4"/><label kind="synchronisation" x="-3112" y="-367">show1!</label></transition><transition><source ref="id5"/><target ref="id3"/><label kind="synchronisation" x="-3328" y="-208">punish1?</label></transition><transition><source ref="id6"/><target ref="id5"/><label kind="synchronisation" x="-3312" y="-367">nshow1!</label></transition><transition><source ref="id7"/><target ref="id6"/><label kind="synchronisation" x="-3272" y="-543">record!</label><label kind="assignment" x="-3176" y="-528">recorded=receipt</label></transition><transition><source ref="id14"/><target ref="id7"/><label kind="assignment" x="-3320" y="-736">receipt.o = ballots[0].onion,
receipt.i = c_index(1),
chosen = 1</label><label kind="comments">Vote for 1</label></transition><transition><source ref="id12"/><target ref="id8"/><label kind="synchronisation" x="-4328" y="-176">not_punish1?</label></transition><transition><source ref="id12"/><target ref="id9"/><label kind="synchronisation" x="-4128" y="-176">punish1?</label></transition><transition><source ref="id13"/><target ref="id10"/><label kind="synchronisation" x="-4016" y="-192">not_punish1?</label></transition><transition><source ref="id13"/><target ref="id11"/><label kind="synchronisation" x="-3856" y="-184">punish1?</label></transition><transition><source ref="id15"/><target ref="id12"/><label kind="synchronisation" x="-4128" y="-352">nshow1!</label></transition><transition><source ref="id15"/><target ref="id13"/><label kind="synchronisation" x="-3968" y="-336">show1!</label></transition><transition><source ref="id17"/><target ref="id14"/><label kind="synchronisation" x="-3456" y="-856">v_phase?</label></transition><transition><source ref="id16"/><target ref="id15"/><label kind="synchronisation" x="-3944" y="-560">record!</label><label kind="assignment" x="-3832" y="-544">recorded=receipt</label></transition><transition><source ref="id14"/><target ref="id16"/><label kind="assignment" x="-3760" y="-760">receipt.o = ballots[0].onion,
receipt.i = c_index(0),
chosen = 0</label><label kind="comments">Vote for 0</label></transition></template><template><name>Mteller</name><declaration>int j=0; // M_j 

void mix(int[0, 20] r_i, int[0,1] p_i){
  for(i:b_i){
    int pi = P_b[ p_i ][i];

    board[j+1][pi].y1 = board[j][i].y1 * zpow(pk.a, batch_rand[r_i][i]) % z_order;
    board[j+1][pi].y2 = board[j][i].y2 * zpow(pk.b, batch_rand[r_i][i]) % z_order;
  }
}
</declaration><location id="id18" x="-1760" y="-464"><name x="-1792" y="-456">halt</name></location><location id="id19" x="-1760" y="-576"><name x="-1800" y="-568">mixing</name><committed/></location><location id="id20" x="-1888" y="-576"><name x="-1904" y="-568">idle</name></location><init ref="id20"/><transition><source ref="id19"/><target ref="id18"/><label kind="guard" x="-1848" y="-504">j==2*mt_total</label></transition><transition><source ref="id20"/><target ref="id19"/><label kind="synchronisation" x="-1864" y="-576">m_phase?</label><label kind="assignment" x="-1864" y="-560">j=0</label></transition><transition><source ref="id19"/><target ref="id19"/><label kind="select" x="-1720" y="-688">r_i:int[0,20],
perm_i: int[0,1]</label><label kind="guard" x="-1720" y="-648">j&lt;2*mt_total</label><label kind="assignment" x="-1720" y="-624">mix(r_i, perm_i),
j++</label><nail x="-1728" y="-624"/><nail x="-1616" y="-624"/><nail x="-1616" y="-576"/><nail x="-1720" y="-576"/></transition></template><template><name>Dteller</name><declaration>const int k = 3; // priv key

void my_decr(){
  b_j ptr = 1 + 2*mt_total;
  for(i:b_i){
    board[ptr][i].y1 = board[ptr-1][i].y1;
    board[ptr][i].y2 = decr( board[ptr-1][i], k );
  }
}</declaration><location id="id21" x="-1280" y="-160"><name x="-1296" y="-144">idle</name></location><location id="id22" x="-960" y="-160"><name x="-968" y="-144">halt</name></location><location id="id23" x="-1120" y="-160"><name x="-1136" y="-144">wait</name><committed/></location><init ref="id21"/><transition><source ref="id21"/><target ref="id23"/><label kind="synchronisation" x="-1232" y="-160">d_phase?</label></transition><transition><source ref="id23"/><target ref="id22"/><label kind="assignment" x="-1072" y="-160">my_decr()</label></transition></template><template><name>Sys</name><declaration>meta int[0,v_total] voted = 0;

int vote_sum[c_total];

void gen_ballots(int[0,20] r_i){     // assuming seed = v_id (here "i)"
  for(i:v_t){
    ballots[i].onion = encr(zpow(pk.a, -i), batch_rand[r_i][i]);              // gamma^(-s) == gamma^(p-1) * gamma^(-s) // gamma^(p-1) == 1
    for(j:c_t){
      ballots[i].cl[j] = P_c[(2+i)%2][j];                  
    }
  }
}

void absorb_i(Receipt&amp; recorded){ 
  board[0][voted].y1 = recorded.o.y1;
  board[0][voted].y2 = recorded.o.y2 * zpow(pk.a, recorded.i) % z_order; ; 
}


bool post_results(){
  int i = b_cols-1,j,m;
  int tmp;
  for(j=0;j&lt;c_total;j++){
    vote_sum[j]=0; // pre-init with zeroes
  }
  
  for(j=0;j&lt;b_rows;j++){
    m = board[i][j].y2; // gamma^(r-s)
    if(m == 0) return false;
    tmp = dlog[m];
    vote_sum[( tmp )%c_total]++; // candidate == (r-s)%c_total
  }
  return true;
}</declaration><location id="id24" x="-672" y="-1712"><name x="-712" y="-1696">voting</name></location><location id="id25" x="-888" y="-1712"><name x="-912" y="-1696">start</name></location><location id="id26" x="-520" y="-1712"><committed/></location><location id="id27" x="-672" y="-1568"><name x="-704" y="-1552">mixing</name></location><location id="id28" x="-360" y="-1568"><name x="-384" y="-1552">results</name></location><location id="id29" x="-520" y="-1568"><name x="-552" y="-1552">decryption</name></location><init ref="id25"/><transition><source ref="id26"/><target ref="id24"/><label kind="assignment" x="-632" y="-1680">initial_batch[voted] = recorded,
absorb_i(recorded),
voted++</label><nail x="-552" y="-1680"/><nail x="-640" y="-1680"/></transition><transition><source ref="id25"/><target ref="id24"/><label kind="select" x="-840" y="-1736">rand:int[0,20]</label><label kind="synchronisation" x="-840" y="-1712">v_phase!</label><label kind="assignment" x="-840" y="-1696">gen_ballots(rand),
voted=0</label><nail x="-688" y="-1712"/></transition><transition><source ref="id24"/><target ref="id27"/><label kind="guard" x="-776" y="-1616">voted == v_total</label><label kind="synchronisation" x="-664" y="-1616">m_phase!</label></transition><transition><source ref="id24"/><target ref="id26"/><label kind="synchronisation" x="-632" y="-1744">record?</label><nail x="-640" y="-1744"/><nail x="-552" y="-1744"/></transition><transition><source ref="id29"/><target ref="id28"/><label kind="assignment" x="-480" y="-1568">post_results()</label></transition><transition><source ref="id27"/><target ref="id29"/><label kind="synchronisation" x="-632" y="-1568">d_phase!</label></transition></template><template><name>Coercer</name><declaration>bool coercion[v_total];

bool seen[v_total];
// Receipt shown_receipts[v_total];</declaration><location id="id30" x="-1472" y="224"><name x="-1482" y="194">nshow_npun</name></location><location id="id31" x="-1280" y="232"><name x="-1290" y="202">nshow_pun</name></location><location id="id32" x="-1144" y="240"><name x="-1154" y="210">show_npun</name></location><location id="id33" x="-936" y="240"><name x="-946" y="210">show_pun</name></location><location id="id34" x="-1352" y="-16"><name x="-1362" y="-46">not_show_1</name><label kind="comments">Not seen Voter 0 receipt</label></location><location id="id35" x="-1032" y="-8"><name x="-1042" y="-38">show_1</name><label kind="comments">Seen voter 0 receipt</label></location><location id="id36" x="-1192" y="-240"></location><init ref="id36"/><transition><source ref="id34"/><target ref="id30"/><label kind="synchronisation" x="-1528" y="104">not_punish1!</label></transition><transition><source ref="id34"/><target ref="id31"/><label kind="synchronisation" x="-1296" y="112">punish1!</label></transition><transition><source ref="id35"/><target ref="id32"/><label kind="synchronisation" x="-1176" y="96">not_punish1!</label></transition><transition><source ref="id35"/><target ref="id33"/><label kind="synchronisation" x="-968" y="96">punish1!</label></transition><transition><source ref="id36"/><target ref="id34"/><label kind="synchronisation" x="-1328" y="-168">nshow1?</label><label kind="assignment" x="-1272" y="-120">seen[0]=false</label></transition><transition><source ref="id36"/><target ref="id35"/><label kind="synchronisation" x="-1104" y="-144">show1?</label><label kind="assignment" x="-1152" y="-80">seen[0]=true</label></transition></template><template><name>Voter2</name><declaration>// assosiate ballots[v_id] Ballot with each voter

Receipt receipt; // here onion is same as v_id

c_t chosen; // candidate whom voter thinks he voted for

c_t c_index(c_t target){
  for (cell_i: c_t){
    if ( ballots[1].cl[cell_i] == target ) return cell_i; // replace with my_ballot variable in next implementation
  }
  return -1; // results in rangeException throw
}</declaration><location id="id37" x="56" y="-24"><name x="80" y="-40">received_receipt_1</name></location><location id="id38" x="-232" y="-32"><name x="-368" y="-40">received_receipt_0</name></location><location id="id39" x="56" y="-168"><name x="72" y="-176">marked_choice_1</name></location><location id="id40" x="-232" y="-176"><name x="-360" y="-184">marked_choice_0</name></location><location id="id41" x="-88" y="-328"><name x="-64" y="-336">has_ballot</name></location><location id="id42" x="-88" y="-472"></location><init ref="id42"/><transition><source ref="id39"/><target ref="id37"/><label kind="synchronisation" x="-4" y="-103">record!</label><label kind="assignment" x="64" y="-96">recorded=receipt</label></transition><transition><source ref="id40"/><target ref="id38"/><label kind="synchronisation" x="-300" y="-119">record!</label><label kind="assignment" x="-224" y="-112">recorded=receipt</label></transition><transition><source ref="id41"/><target ref="id39"/><label kind="assignment" x="8" y="-280">receipt.o = ballots[1].onion,
receipt.i = c_index(1),
chosen = 1</label><label kind="comments">Vote for 1</label></transition><transition><source ref="id41"/><target ref="id40"/><label kind="assignment" x="-320" y="-280">receipt.o = ballots[1].onion,
receipt.i = c_index(0),
chosen = 0</label><label kind="comments">Vote for 0</label></transition><transition><source ref="id42"/><target ref="id41"/><label kind="synchronisation" x="-148" y="-415">v_phase?</label></transition></template><system>// Place template instantiations here.

// List one or more processes to be composed into a system.

system Sys, Voter1, Voter2, Coercer, Mteller, Dteller;</system></nta>