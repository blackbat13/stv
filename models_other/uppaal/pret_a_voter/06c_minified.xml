<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here.

// config variables
const int mt_total = 1; // # of mix tellers
const int dt_total = 1; // # of decr tellers  ( Shamir's Secret (2,3) )
const int v_total = 2; // # of voters

const int c_total = 2; // # of candidates
const int z_order = 7;

typedef int[0,c_total-1] c_t;
typedef int[0,v_total-1] v_t;
typedef int[0,z_order-1] z_t;

const z_t batch_rand[21][2] = {{0,1},{0,2},{0,3},{0,4},{0,5},{0,6},{1,2},{1,3},{1,4},{1,5},{1,6},{2,3},{2,4},{2,5},{2,6},{3,4},{3,5},{3,6},{4,5},{4,6},{5,6}};

const struct{
  z_t a; // alfa
  z_t b; // beta = alfa^k
}pk= { 3, 6 }; // public key for secret k=3

typedef struct{
  z_t y1, y2; // a pair of (a^r, m*(b^r)) where m=message, r=random
} Ciphertext;

const c_t C[c_total] = {0,1}; // candidate list

// naive power modulo calculation in Z_p
int zpow(z_t a, int b) // a^b mod p
{
  if(b==0){
    return 1;
  }else{
    z_t x=a;
    int i;
    if(b&lt;0)b=(z_order - 1)*(-b);
    b = b%(z_order - 1); // assuming p is prime
    for (i=1;i&lt;b;i++){
      x=(x*a)%z_order;
    }
    return x;
  }
}

typedef struct 
{ 
  Ciphertext o; // value of "onion" at the bottom of the strip
  c_t i; // index of cell with X
} Receipt;


typedef struct{
  Ciphertext onion;
  c_t cl[c_total]; // position -&gt; candidate
} Ballot;


const int P_b[2][c_total] = { 
  { 0,1 },
  { 1,0 }
};

const int P_c[2][c_total] = { 
  { 0,1 },
  { 1,0 }
};


//Coercer-Voter channels
chan punish[v_total], not_punish[v_total],interract[v_total];
chan show[v_total];

//Voter-Sys channels
chan cast;
chan record;
Receipt recorded, shown;

const int b_cols = 1 + 2*mt_total + dt_total;  
const int b_rows = v_total;

typedef int[0,b_cols-1] b_j; // board col index 
typedef int[0,b_rows-1] b_i; // board row index

Ciphertext board[b_cols][b_rows]; // WBB
Ciphertext batch[b_rows]; // temporary column values storage

const int dlog[7]={-999,0,2,1,4,5,3};


Ballot ballots[v_total];
Receipt initial_batch[b_rows]; // "initial" column of WBB, in case of absorbed index may be hidden

Ciphertext encr(z_t m, int r){ // m = message, r = randomization factor
  Ciphertext c;
  
  c.y1 = zpow( pk.a, r);
  c.y2 = zpow( pk.b, r) * m % z_order;
  
  return c;
}

z_t decr(Ciphertext &amp;c, int key){
  return (c.y2 * zpow(c.y1, -key) )%z_order;
}


broadcast chan v_phase, m_phase, d_phase, c_phase;</declaration><template><name x="5" y="5">Voter</name><parameter>const int[0,v_total-1] v_id</parameter><declaration>// assosiate ballots[v_id] Ballot with each voter

Receipt receipt; // here onion is same as v_id

bool coerced = false;
c_t chosen; // candidate whom voter thinks he voted for

c_t c_index(c_t target){
  for (cell_i: c_t){
    if ( ballots[v_id].cl[cell_i] == target ) return cell_i; // replace with my_ballot variable in next implementation
  }
  return -1; // results in rangeException throw
}</declaration><location id="id0" x="-2928" y="-448"><name x="-2936" y="-440">not_punished</name></location><location id="id1" x="-2928" y="-576"><name x="-2936" y="-560">punished</name></location><location id="id2" x="-3720" y="-512"><name x="-3760" y="-504">has_ballot</name></location><location id="id3" x="-3104" y="-512"><name x="-3112" y="-496">end</name></location><location id="id4" x="-3232" y="-512"><name x="-3352" y="-504">received_receipt</name></location><location id="id5" x="-3448" y="-512"><name x="-3496" y="-504">marked_choice</name></location><location id="id6" x="-3872" y="-512"><name x="-3912" y="-512">idle</name></location><init ref="id6"/><transition><source ref="id3"/><target ref="id0"/><label kind="guard" x="-3056" y="-472">coerced</label><label kind="synchronisation" x="-3056" y="-448">not_punish[v_id]?</label><nail x="-3056" y="-448"/></transition><transition><source ref="id3"/><target ref="id1"/><label kind="guard" x="-3056" y="-600">coerced</label><label kind="synchronisation" x="-3056" y="-576">punish[v_id]?</label><nail x="-3056" y="-576"/></transition><transition><source ref="id4"/><target ref="id4"/><label kind="guard" x="-3264" y="-448">coerced</label><label kind="synchronisation" x="-3264" y="-424">show[v_id]!</label><label kind="assignment" x="-3264" y="-408">shown=receipt</label><nail x="-3280" y="-424"/><nail x="-3184" y="-424"/></transition><transition><source ref="id6"/><target ref="id6"/><label kind="guard" x="-3904" y="-448">!coerced</label><label kind="synchronisation" x="-3904" y="-424">interract[v_id]?</label><label kind="assignment" x="-3904" y="-408">coerced=true</label><nail x="-3824" y="-424"/><nail x="-3920" y="-424"/></transition><transition><source ref="id6"/><target ref="id2"/><label kind="synchronisation" x="-3824" y="-544">v_phase?</label><nail x="-3840" y="-544"/><nail x="-3744" y="-544"/></transition><transition><source ref="id4"/><target ref="id3"/><nail x="-3208" y="-544"/><nail x="-3128" y="-544"/></transition><transition><source ref="id5"/><target ref="id4"/><label kind="synchronisation" x="-3392" y="-544">record!</label><label kind="assignment" x="-3392" y="-528">recorded:=receipt</label><nail x="-3416" y="-544"/><nail x="-3264" y="-544"/></transition><transition><source ref="id2"/><target ref="id5"/><label kind="select" x="-3680" y="-568">X: c_t</label><label kind="assignment" x="-3680" y="-544">receipt.o = ballots[v_id].onion,
receipt.i = c_index(X),
chosen = X</label><nail x="-3696" y="-544"/><nail x="-3480" y="-544"/></transition></template><template><name>Mteller</name><declaration>int[0, 20] r_i;
int j=0; // M_j 

void mix(int[0,1] p_i){
  for(i:b_i){
    int pi = P_b[ p_i ][i];

    board[j+1][pi].y1 = board[j][i].y1 * zpow(pk.a, batch_rand[r_i][i]) % z_order;
    board[j+1][pi].y2 = board[j][i].y2 * zpow(pk.b, batch_rand[r_i][i]) % z_order;
  }
}
</declaration><location id="id7" x="-1760" y="-416"><name x="-1792" y="-408">halt</name></location><location id="id8" x="-1760" y="-576"><name x="-1792" y="-568">wait</name><committed/></location><location id="id9" x="-1536" y="-576"><name x="-1536" y="-568">mixing</name><committed/></location><location id="id10" x="-1888" y="-576"><name x="-1904" y="-568">idle</name></location><init ref="id10"/><transition><source ref="id8"/><target ref="id7"/><label kind="guard" x="-1848" y="-464">j==2*mt_total</label></transition><transition><source ref="id10"/><target ref="id8"/><label kind="synchronisation" x="-1864" y="-576">m_phase?</label><label kind="assignment" x="-1840" y="-560">j=0</label></transition><transition><source ref="id9"/><target ref="id8"/><label kind="select" x="-1696" y="-552">perm_i: int[0,1]</label><label kind="assignment" x="-1696" y="-528">mix(perm_i),
j++</label><nail x="-1568" y="-528"/><nail x="-1728" y="-528"/></transition><transition><source ref="id8"/><target ref="id9"/><label kind="select" x="-1696" y="-664">rand:int[0,20]</label><label kind="guard" x="-1696" y="-648">j&lt;2*mt_total</label><label kind="assignment" x="-1696" y="-624">r_i=rand</label><nail x="-1728" y="-624"/><nail x="-1568" y="-624"/></transition></template><template><name>Dteller</name><declaration>const int k = 3; // priv key

void my_decr(){
  b_j ptr = 1 + 2*mt_total;
  for(i:b_i){
    board[ptr][i].y1 = board[ptr-1][i].y1;
    board[ptr][i].y2 = decr( board[ptr-1][i], k );
  }
}</declaration><location id="id11" x="-1280" y="-160"><name x="-1296" y="-144">idle</name></location><location id="id12" x="-960" y="-160"><name x="-968" y="-144">halt</name></location><location id="id13" x="-1120" y="-160"><name x="-1136" y="-144">wait</name><committed/></location><init ref="id11"/><transition><source ref="id11"/><target ref="id13"/><label kind="synchronisation" x="-1232" y="-160">d_phase?</label></transition><transition><source ref="id13"/><target ref="id12"/><label kind="assignment" x="-1072" y="-160">my_decr()</label></transition></template><template><name>Sys</name><declaration>meta int[0,v_total] voted = 0;

int vote_sum[c_total];

void gen_ballots(int[0,20] r_i){     // assuming seed = v_id (here "i)"
  for(i:v_t){
    ballots[i].onion = encr(zpow(pk.a, -i), batch_rand[r_i][i]);              // gamma^(-s) == gamma^(p-1) * gamma^(-s) // gamma^(p-1) == 1
    for(j:c_t){
      ballots[i].cl[j] = P_c[(2+i)%2][j];                  
    }
  }
}

void absorb_i(Receipt&amp; recorded){ 
  board[0][voted].y1 = recorded.o.y1;
  board[0][voted].y2 = recorded.o.y2 * zpow(pk.a, recorded.i) % z_order; ; 
}


bool post_results(){
  int i = b_cols-1,j,m;
  int tmp;
  for(j=0;j&lt;c_total;j++){
    vote_sum[j]=0; // pre-init with zeroes
  }
  
  for(j=0;j&lt;b_rows;j++){
    m = board[i][j].y2; // gamma^(r-s)
    if(m == 0) return false;
    tmp = dlog[m];
    vote_sum[( tmp )%c_total]++; // candidate == (r-s)%c_total
  }
  return true;
}</declaration><location id="id14" x="-672" y="-1712"><name x="-712" y="-1696">voting</name></location><location id="id15" x="-832" y="-1712"><name x="-872" y="-1696">ballots_ready</name><committed/></location><location id="id16" x="-1000" y="-1712"><name x="-1024" y="-1696">start</name></location><location id="id17" x="-520" y="-1712"><committed/></location><location id="id18" x="-672" y="-1568"><name x="-704" y="-1552">mixing</name></location><location id="id19" x="-360" y="-1568"><name x="-384" y="-1552">results</name></location><location id="id20" x="-520" y="-1568"><name x="-552" y="-1552">decryption</name></location><init ref="id16"/><transition><source ref="id15"/><target ref="id14"/><label kind="synchronisation" x="-784" y="-1712">v_phase!</label><label kind="assignment" x="-776" y="-1696">voted=0</label></transition><transition><source ref="id17"/><target ref="id14"/><label kind="assignment" x="-632" y="-1680">initial_batch[voted] = recorded,
absorb_i(recorded),
voted++</label><nail x="-552" y="-1680"/><nail x="-640" y="-1680"/></transition><transition><source ref="id16"/><target ref="id15"/><label kind="select" x="-968" y="-1736">rand:int[0,20]</label><label kind="assignment" x="-968" y="-1712">gen_ballots(rand)</label></transition><transition><source ref="id14"/><target ref="id18"/><label kind="guard" x="-776" y="-1616">voted == v_total</label><label kind="synchronisation" x="-664" y="-1616">m_phase!</label></transition><transition><source ref="id14"/><target ref="id17"/><label kind="synchronisation" x="-632" y="-1744">record?</label><nail x="-640" y="-1744"/><nail x="-552" y="-1744"/></transition><transition><source ref="id20"/><target ref="id19"/><label kind="assignment" x="-480" y="-1568">post_results()</label></transition><transition><source ref="id18"/><target ref="id20"/><label kind="synchronisation" x="-632" y="-1568">d_phase!</label></transition></template><template><name>Coercer</name><declaration>bool coercion[v_total];

bool seen[v_total];
// Receipt shown_receipts[v_total];</declaration><location id="id21" x="-864" y="0"><name x="-904" y="-32">loop</name></location><init ref="id21"/><transition><source ref="id21"/><target ref="id21"/><label kind="select" x="-984" y="56">v_id: v_t</label><label kind="guard" x="-1000" y="72">coercion[v_id]</label><label kind="synchronisation" x="-1008" y="96">not_punish[v_id]!</label><label kind="assignment" x="-1016" y="112">coercion[v_id]=false</label><nail x="-896" y="96"/><nail x="-1024" y="96"/><nail x="-1024" y="32"/></transition><transition><source ref="id21"/><target ref="id21"/><label kind="select" x="-792" y="56">v_id: v_t</label><label kind="guard" x="-808" y="72">coercion[v_id]</label><label kind="synchronisation" x="-800" y="96">punish[v_id]!</label><label kind="assignment" x="-824" y="112">coercion[v_id]=false</label><nail x="-704" y="32"/><nail x="-704" y="96"/><nail x="-832" y="96"/></transition><transition><source ref="id21"/><target ref="id21"/><label kind="select" x="-792" y="-136">v_id: v_t</label><label kind="guard" x="-800" y="-120">!seen[v_id]</label><label kind="synchronisation" x="-800" y="-96">show[v_id]?</label><label kind="assignment" x="-808" y="-80">seen[v_id]=true</label><nail x="-832" y="-96"/><nail x="-704" y="-96"/><nail x="-704" y="-32"/></transition><transition><source ref="id21"/><target ref="id21"/><label kind="select" x="-984" y="-120">v_id: v_t</label><label kind="synchronisation" x="-1000" y="-96">interract[v_id]!</label><label kind="assignment" x="-1016" y="-80">coercion[v_id]=true</label><nail x="-1024" y="-32"/><nail x="-1024" y="-96"/><nail x="-896" y="-96"/></transition></template><system>// Place template instantiations here.

// List one or more processes to be composed into a system.

system Sys, Voter, Coercer, Mteller, Dteller;</system></nta>