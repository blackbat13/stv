<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here.

// config variables
const int mt_total = 3; // # of mix tellers
const int dt_total = 3; // # of decr tellers  ( Shamir's Secret (2,3) )
const int v_total = 3; // # of voters

const int c_total = 3; // # of candidates
const int z_order = 11;

typedef int[0,c_total-1] c_t;
typedef int[0,v_total-1] v_t;
typedef int[0,z_order-1] z_t;

const struct{
  z_t a; // alfa
  z_t b; // beta = alfa^k
}pk= { 6,7 }; // public key for secret k=3

typedef struct{
  z_t y1, y2; // a pair of (a^r, m*(b^r)) where m=message, r=random
} Ciphertext;

const c_t C[3] = {0,1,2}; // candidate list


// naive power modulo calculation in Z_p
int zpow(z_t a, int b) // a^b mod p
{
  if(b==0){
    return 1;
  }else{
    z_t x=a;
    int i;
    if(b&lt;0)b=(z_order - 1)*(-b);
    b = b%(z_order - 1); // assuming p is prime
    for (i=1;i&lt;b;i++){
      x=(x*a)%z_order;
    }
    return x;
  }
}

typedef struct 
{ 
  Ciphertext o; // value of "onion" at the bottom of the strip
  c_t i; // index of cell with X
} Receipt;


typedef struct{
  Ciphertext onion;
  c_t cl[c_total]; // position -&gt; candidate
} Ballot;


const int P_b[6][c_total] = { // permutations of terms
  { 0,1,2 },
  { 0,2,1 },
  { 1,0,2 },
  { 1,2,0 },
  { 2,0,1 },
  { 2,1,0 }
};
const int P_c[6][c_total] = { // permutations of C
  { 0,1,2 },
  { 0,2,1 },
  { 1,0,2 },
  { 1,2,0 },
  { 2,0,1 },
  { 2,1,0 }
};
const int S_c[3][c_total] = {  // cyclic shifts of C
  { 0,1,2 },
  { 1,2,0 },
  { 2,0,1 } 
};


//Coercer-Voter channels
chan punish[v_total], not_punish[v_total],interract[v_total];
chan show[v_total];

//Voter-Sys channels
chan cast;
chan record;
Receipt recorded, shown;

//Auditor-mteller channels
chan reveal_left[mt_total], reveal_right[mt_total];
chan audit_fail, audit_pass;


int[0,v_total] votes = 0;
int[0,mt_total] mixes = 0;
int[0,dt_total] decryptions = 0;

int mix_i;
int term_i;
int reveal_rand;
int reveal_link;

const int priv_k = 3;        // ElGamal private key
// hardcoded key shares
const int priv_k_shares[dt_total] = {8,2,7};
const int dt_min = 2;
int dt_required = dt_min;



//board

const int b_cols = 1 + 2*mt_total + dt_min;  
const int b_rows = v_total;

typedef int[0,b_cols-1] b_j; // board col index 
typedef int[0,b_rows-1] b_i; // board row index

Ciphertext board[b_cols][b_rows]; // WBB
Ciphertext batch[b_rows]; // temporary column values storage

const int onion2seed[11] = { //for g = 6
  -999,  // gamma^x = 0 NaN
  0,
  9,
  2,
  8,
  6,
  1,
  3,
  7,
  4,
  5
};


Ballot ballots[v_total];
Receipt initial_batch[b_rows]; // "initial" column of WBB, in case of absorbed index may be hidden

Ciphertext encr(z_t m, int r){ // m = message, r = randomization factor
  Ciphertext c;
  
  c.y1 = zpow( pk.a, r);
  c.y2 = zpow( pk.b, r) * m % z_order;
  
  return c;
}

z_t decr(Ciphertext &amp;c, int key){
  return (c.y2 * zpow(c.y1, -key) )%z_order;
}


broadcast chan v_phase, p_phase, m_phase, d_phase, c_phase;</declaration><template><name x="5" y="5">Voter</name><parameter>const int[0,v_total-1] v_id</parameter><declaration>// assosiate ballots[v_id] Ballot with each voter

Receipt receipt; // here onion is same as v_id

bool coerced = false;
c_t chosen; // candidate whom voter thinks he voted for

 // ElGamal public key
bool verify(){
  return exists(i:int[0,v_total-1]) initial_batch[i]==receipt;
}

c_t c_index(c_t target){
  for (cell_i: c_t){
    if ( ballots[v_id].cl[cell_i] == target ) return cell_i; // replace with my_ballot variable in next implementation
  }
  return -1; // results in rangeException throw
}</declaration><location id="id0" x="-2672" y="-448"><name x="-2680" y="-440">not_punished</name></location><location id="id1" x="-2672" y="-576"><name x="-2680" y="-560">punished</name></location><location id="id2" x="-3720" y="-512"><name x="-3760" y="-504">has_ballot</name></location><location id="id3" x="-2848" y="-512"><name x="-2856" y="-496">end</name></location><location id="id4" x="-2984" y="-576"><name x="-2968" y="-576">passed</name></location><location id="id5" x="-3104" y="-512"><name x="-3168" y="-504">verification</name></location><location id="id6" x="-2984" y="-448"><name x="-2968" y="-448">failed</name></location><location id="id7" x="-3232" y="-512"><name x="-3352" y="-504">received_receipt</name></location><location id="id8" x="-3448" y="-512"><name x="-3496" y="-504">marked_choice</name></location><location id="id9" x="-3872" y="-512"><name x="-3912" y="-512">idle</name></location><init ref="id9"/><transition><source ref="id3"/><target ref="id0"/><label kind="guard" x="-2800" y="-472">coerced</label><label kind="synchronisation" x="-2800" y="-448">not_punish[v_id]?</label><nail x="-2800" y="-448"/></transition><transition><source ref="id3"/><target ref="id1"/><label kind="guard" x="-2800" y="-600">coerced</label><label kind="synchronisation" x="-2800" y="-576">punish[v_id]?</label><nail x="-2800" y="-576"/></transition><transition><source ref="id7"/><target ref="id7"/><label kind="guard" x="-3264" y="-448">coerced</label><label kind="synchronisation" x="-3264" y="-424">show[v_id]!</label><label kind="assignment" x="-3264" y="-408">shown=receipt</label><nail x="-3280" y="-424"/><nail x="-3184" y="-424"/></transition><transition><source ref="id9"/><target ref="id9"/><label kind="guard" x="-3904" y="-448">!coerced</label><label kind="synchronisation" x="-3904" y="-424">interract[v_id]?</label><label kind="assignment" x="-3904" y="-408">coerced=true</label><nail x="-3824" y="-424"/><nail x="-3920" y="-424"/></transition><transition><source ref="id9"/><target ref="id2"/><label kind="synchronisation" x="-3832" y="-512">v_phase?</label></transition><transition><source ref="id6"/><target ref="id3"/><nail x="-2888" y="-448"/></transition><transition><source ref="id4"/><target ref="id3"/><nail x="-2888" y="-576"/></transition><transition><source ref="id7"/><target ref="id3"/><nail x="-3192" y="-616"/><nail x="-2880" y="-616"/></transition><transition><source ref="id7"/><target ref="id5"/><label kind="synchronisation" x="-3200" y="-544">p_phase?</label><nail x="-3200" y="-544"/><nail x="-3136" y="-544"/></transition><transition><source ref="id5"/><target ref="id4"/><label kind="guard" x="-3064" y="-600">verify()</label><nail x="-3080" y="-576"/></transition><transition><source ref="id5"/><target ref="id6"/><label kind="guard" x="-3064" y="-472">!verify()</label><nail x="-3080" y="-448"/></transition><transition><source ref="id8"/><target ref="id7"/><label kind="synchronisation" x="-3392" y="-544">record!</label><label kind="assignment" x="-3392" y="-528">recorded:=receipt</label><nail x="-3416" y="-544"/><nail x="-3264" y="-544"/></transition><transition><source ref="id2"/><target ref="id8"/><label kind="select" x="-3680" y="-568">X: c_t</label><label kind="assignment" x="-3680" y="-544">receipt.o = ballots[v_id].onion,
receipt.i = c_index(X),
chosen = X</label><nail x="-3696" y="-544"/><nail x="-3480" y="-544"/></transition></template><template><name>Mteller</name><parameter>const int[0,2] mt_id</parameter><declaration>meta int[0,v_total] rand_ptr = 0;
// might be needed to remove meta for audit
meta int[0,z_order - 2] vec_r[2][v_total]; // vector of random values for re-encr 
meta int[0,5] perm_i[2];

bool odd_mix = true;

const int mycol[2] = { 1+mt_id*2, 1+mt_id*2+1 };

// todo: each term should have its own encr_r randomization (rather should)
void do_mixing(){
  b_j col = mycol[odd_mix ? 0:1];

  for(i:b_i){
    int pi = P_b[ perm_i[odd_mix ? 0:1] ][i];

    board[col][pi].y1 = board[col - 1][i].y1 * zpow(pk.a, vec_r[odd_mix ? 0:1][i]) % z_order;
    board[col][pi].y2 = board[col - 1][i].y2 * zpow(pk.b, vec_r[odd_mix ? 0:1][i]) % z_order;
  }
}
</declaration><location id="id10" x="-1760" y="-576"><name x="-1776" y="-568">wait</name></location><location id="id11" x="-1344" y="-576"><name x="-1360" y="-568">even</name><committed/></location><location id="id12" x="-1568" y="-576"><name x="-1584" y="-568">odd</name><committed/></location><location id="id13" x="-1088" y="-576"><name x="-1104" y="-568">audit</name></location><location id="id14" x="-1896" y="-576"><name x="-1912" y="-568">idle</name></location><init ref="id14"/><transition><source ref="id14"/><target ref="id10"/><label kind="synchronisation" x="-1864" y="-576">m_phase?</label></transition><transition><source ref="id11"/><target ref="id13"/><label kind="select" x="-1248" y="-616">rand:int[0,5]</label><label kind="guard" x="-1264" y="-600">rand_ptr==v_total</label><label kind="assignment" x="-1256" y="-576">perm_i[1]=rand,
do_mixing(),
mixes++</label></transition><transition><source ref="id12"/><target ref="id11"/><label kind="select" x="-1496" y="-616">rand: int[0,5]</label><label kind="guard" x="-1512" y="-600">rand_ptr==v_total</label><label kind="assignment" x="-1504" y="-576">perm_i[0]=rand,
do_mixing(),
rand_ptr=0</label></transition><transition><source ref="id11"/><target ref="id11"/><label kind="select" x="-1424" y="-712">rand: int[0,z_order-2]</label><label kind="guard" x="-1424" y="-696">rand_ptr&lt;v_total</label><label kind="assignment" x="-1424" y="-672">vec_r[1][rand_ptr++]=rand</label><nail x="-1248" y="-640"/><nail x="-1248" y="-672"/><nail x="-1440" y="-672"/><nail x="-1440" y="-640"/></transition><transition><source ref="id12"/><target ref="id12"/><label kind="select" x="-1648" y="-712">rand: int[0,z_order-2]</label><label kind="guard" x="-1648" y="-696">rand_ptr&lt;v_total</label><label kind="assignment" x="-1648" y="-672">vec_r[0][rand_ptr++]=rand</label><nail x="-1472" y="-640"/><nail x="-1472" y="-672"/><nail x="-1664" y="-672"/><nail x="-1664" y="-640"/></transition><transition><source ref="id10"/><target ref="id12"/><label kind="guard" x="-1736" y="-600">mixes==mt_id</label><label kind="assignment" x="-1736" y="-576">rand_ptr=0</label></transition></template><template><name>Dteller</name><parameter>const int[0,dt_total - 1] dt_id</parameter><declaration>int[0,z_order-1] k_share = priv_k_shares[dt_id];
int x = dt_id+1;

// 1,8
// 2,2
// 3,7

void my_decr(){
  b_i ptr = 1 + 2*mt_total + decryptions;
  for(j:b_j){
    board[ptr][j].y1 = board[ptr-1][j].y1;
    board[ptr][j].y2 = decr( board[ptr][j-1], k_share );
  }
}</declaration><location id="id15" x="-1264" y="-168"><name x="-1280" y="-152">idle</name></location><location id="id16" x="-1112" y="-40"><name x="-1136" y="-24">refused</name></location><location id="id17" x="-672" y="-168"><name x="-680" y="-152">halt</name></location><location id="id18" x="-880" y="-168"><name x="-920" y="-152">cooperating</name><committed/></location><location id="id19" x="-1112" y="-168"><name x="-1144" y="-152">wait</name></location><init ref="id15"/><transition><source ref="id15"/><target ref="id19"/><label kind="synchronisation" x="-1224" y="-168">d_phase?</label></transition><transition><source ref="id19"/><target ref="id16"/><label kind="guard" x="-1240" y="-104">decryptions&lt;dt_min</label></transition><transition><source ref="id19"/><target ref="id18"/><label kind="guard" x="-1056" y="-192">decryptions&lt;dt_min</label><label kind="assignment" x="-1056" y="-168">my_decr()</label></transition><transition><source ref="id18"/><target ref="id17"/><label kind="assignment" x="-816" y="-168">decryptions++</label></transition></template><template><name>Sys</name><declaration>meta z_t r_vec[v_total];
meta int[0,v_total] r_ptr=0;
meta int[0,v_total] voted = 0;

int vote_sum[c_total];

void generate_ballots(){     // assuming seed = v_id (here "i)"
  for(i:v_t){
    ballots[i].onion = encr(zpow(pk.a, -i), r_vec[i]);              // gamma^(-s) == gamma^(p-1) * gamma^(-s) // gamma^(p-1) == 1
    for(j:c_t){
      ballots[i].cl[j] = S_c[(3-i)%3][j];                            // replace with P_c for other implementation
    }
  }
}

void absorb_i(Receipt&amp; recorded){ 
  board[0][voted].y1 = recorded.o.y1;
  board[0][voted].y2 = recorded.o.y2 * zpow(pk.a, recorded.i) % z_order; ; 
}


bool post_results(){
  int i = b_cols-1,j,m;
  int tmp;
  for(j=0;j&lt;c_total;j++){
    vote_sum[j]=0; // pre-init with zeroes
  }
  
  for(j=0;j&lt;b_rows;j++){
    m = board[i][j].y2; // gamma^(r-s)
    if(m == 0) return false; // throw error, cannot dlog zero
    tmp = onion2seed[m];
    //if(tmp &gt; c_total)tmp = tmp - ((p-1)%c_total);
    if(tmp &gt;= c_total)tmp = tmp - 1;
    vote_sum[( tmp )%c_total]++; // candidate == (r-s)%c_total
  }
/*
0 &lt;= r &lt; c_total
0 &lt;= s &lt; 9999999
-9999 &lt;= r-s &lt; c_total

thus, if (r-s) is above c_total, it was multiplied by  ( g^(p-1) = 1 ) and should be reverted back to negative value
*/  

  return true;
}</declaration><location id="id20" x="-672" y="-1712"><name x="-712" y="-1696">voting</name></location><location id="id21" x="-800" y="-1712"><name x="-840" y="-1696">ballots_ready</name></location><location id="id22" x="-1000" y="-1712"><name x="-1064" y="-1696">generating_ballots</name><committed/></location><location id="id23" x="-1128" y="-1712"><name x="-1144" y="-1696">idle</name></location><location id="id24" x="-520" y="-1712"><committed/></location><location id="id25" x="-672" y="-1568"><name x="-736" y="-1552">receipts_posted</name></location><location id="id26" x="-136" y="-1568"><name x="-160" y="-1552">results</name></location><location id="id27" x="-328" y="-1568"><name x="-360" y="-1552">decryption</name></location><location id="id28" x="-512" y="-1568"><name x="-528" y="-1552">mixing</name></location><init ref="id23"/><transition><source ref="id21"/><target ref="id20"/><label kind="synchronisation" x="-768" y="-1712">v_phase!</label></transition><transition><source ref="id23"/><target ref="id22"/><label kind="assignment" x="-1096" y="-1712">r_ptr=0</label></transition><transition><source ref="id24"/><target ref="id20"/><label kind="assignment" x="-632" y="-1680">initial_batch[voted] = recorded,
absorb_i(recorded),
voted++</label><nail x="-552" y="-1680"/><nail x="-640" y="-1680"/></transition><transition><source ref="id22"/><target ref="id21"/><label kind="guard" x="-936" y="-1736">r_ptr==v_total</label><label kind="assignment" x="-952" y="-1712">generate_ballots()</label></transition><transition><source ref="id22"/><target ref="id22"/><label kind="select" x="-1032" y="-1832">rand: z_t</label><label kind="guard" x="-1040" y="-1816">r_ptr&lt;v_total</label><label kind="assignment" x="-1064" y="-1792">r_vec[r_ptr++]=rand</label><nail x="-936" y="-1760"/><nail x="-936" y="-1792"/><nail x="-1072" y="-1792"/><nail x="-1072" y="-1760"/></transition><transition><source ref="id20"/><target ref="id25"/><label kind="guard" x="-776" y="-1616">voted == v_total</label><label kind="synchronisation" x="-664" y="-1616">p_phase!</label></transition><transition><source ref="id20"/><target ref="id24"/><label kind="synchronisation" x="-632" y="-1744">record?</label><nail x="-640" y="-1744"/><nail x="-552" y="-1744"/></transition><transition><source ref="id27"/><target ref="id26"/><label kind="guard" x="-304" y="-1592">decryptions==dt_min</label><label kind="assignment" x="-292" y="-1568">post_results()</label></transition><transition><source ref="id28"/><target ref="id27"/><label kind="guard" x="-472" y="-1592">mixes==mt_total</label><label kind="synchronisation" x="-456" y="-1568">d_phase!</label></transition><transition><source ref="id25"/><target ref="id28"/><label kind="synchronisation" x="-624" y="-1568">m_phase!</label></transition></template><template><name>Coercer</name><declaration>bool coercion[v_total];

bool seen[v_total];
// Receipt shown_receipts[v_total];</declaration><location id="id29" x="-864" y="0"><name x="-904" y="-32">loop</name></location><init ref="id29"/><transition><source ref="id29"/><target ref="id29"/><label kind="select" x="-984" y="56">v_id: v_t</label><label kind="guard" x="-1000" y="72">coercion[v_id]</label><label kind="synchronisation" x="-1008" y="96">not_punish[v_id]!</label><label kind="assignment" x="-1016" y="112">coercion[v_id]=false</label><nail x="-896" y="96"/><nail x="-1024" y="96"/><nail x="-1024" y="32"/></transition><transition><source ref="id29"/><target ref="id29"/><label kind="select" x="-792" y="56">v_id: v_t</label><label kind="guard" x="-808" y="72">coercion[v_id]</label><label kind="synchronisation" x="-800" y="96">punish[v_id]!</label><label kind="assignment" x="-824" y="112">coercion[v_id]=false</label><nail x="-704" y="32"/><nail x="-704" y="96"/><nail x="-832" y="96"/></transition><transition><source ref="id29"/><target ref="id29"/><label kind="select" x="-792" y="-136">v_id: v_t</label><label kind="guard" x="-800" y="-120">!seen[v_id]</label><label kind="synchronisation" x="-800" y="-96">show[v_id]?</label><label kind="assignment" x="-808" y="-80">seen[v_id]=true</label><nail x="-832" y="-96"/><nail x="-704" y="-96"/><nail x="-704" y="-32"/></transition><transition><source ref="id29"/><target ref="id29"/><label kind="select" x="-984" y="-120">v_id: v_t</label><label kind="synchronisation" x="-1000" y="-96">interract[v_id]!</label><label kind="assignment" x="-1016" y="-80">coercion[v_id]=true</label><nail x="-1024" y="-32"/><nail x="-1024" y="-96"/><nail x="-896" y="-96"/></transition></template><template><name>Auditor</name><declaration>// randomized partial checking

int half = b_rows/2;
int curr = 0;


const int comb_total = 3;
int comb[3][2] = {{0,1}, {0,2}, {1,2}}; // Cnk where k = math.ceil(n/2)
int chosen[2];

bool pass = true;

bool check_mix(bool left){
return true;
/*
  bool res = false;
  int ptr = 1 + 2*mix_i;
  
  Ciphertext src = left ? board[ptr-1][reveal_link] : board[ptr][term_i];
  Ciphertext trg = left ? board[ptr][term_i] : board[ptr+1][reveal_link];
  
  res = ( trg.y1 == ( src.y1 * pow(key.alfa, reveal_rand, key.p) % key.p) &amp;&amp; trg.y2 == ( src.y2 * pow(key.beta, reveal_rand, key.p) % key.p ) );


  pass = pass &amp;&amp; res;
  return res;
*/
}</declaration><location id="id30" x="-736" y="-440"><name x="-744" y="-424">mix_fail</name></location><location id="id31" x="-736" y="-256"><name x="-744" y="-240">mixes_pass</name></location><location id="id32" x="-1104" y="-440"><name x="-1144" y="-432">auditing_mix_i</name></location><location id="id33" x="-1104" y="-576"><name x="-1144" y="-624">choose_side</name></location><location id="id34" x="-944" y="-576"><name x="-936" y="-616">revelead_right</name></location><location id="id35" x="-1264" y="-576"><name x="-1344" y="-608">revealed_left</name></location><location id="id36" x="-1344" y="-256"><name x="-1368" y="-240">idle</name></location><location id="id37" x="-1104" y="-312"><name x="-1224" y="-312">auditing_mixes</name></location><init ref="id36"/><transition><source ref="id32"/><target ref="id30"/><label kind="guard" x="-896" y="-464">!pass</label><label kind="synchronisation" x="-896" y="-440">audit_fail!</label></transition><transition><source ref="id37"/><target ref="id31"/><label kind="guard" x="-896" y="-280">mix_i==mt_total</label><nail x="-1032" y="-256"/></transition><transition><source ref="id32"/><target ref="id33"/><label kind="guard" x="-1168" y="-528">curr&lt;half</label><label kind="assignment" x="-1096" y="-528">term_i = chosen[curr++]</label></transition><transition><source ref="id33"/><target ref="id34"/><label kind="synchronisation" x="-1088" y="-600">reveal_right[mix_i]!</label></transition><transition><source ref="id33"/><target ref="id35"/><label kind="synchronisation" x="-1240" y="-600">reveal_left[mix_i]!</label></transition><transition><source ref="id34"/><target ref="id32"/><label kind="assignment" x="-936" y="-552">check_mix(false)</label><nail x="-944" y="-512"/></transition><transition><source ref="id35"/><target ref="id32"/><label kind="assignment" x="-1368" y="-552">check_mix(true)</label><nail x="-1264" y="-512"/></transition><transition><source ref="id36"/><target ref="id37"/><label kind="assignment" x="-1280" y="-256">mix_i=0</label><nail x="-1168" y="-256"/></transition><transition><source ref="id32"/><target ref="id37"/><label kind="guard" x="-1064" y="-376">pass &amp;&amp; curr==half</label><label kind="synchronisation" x="-1016" y="-392">audit_pass!</label><label kind="assignment" x="-1000" y="-360">mix_i++</label><nail x="-944" y="-416"/><nail x="-944" y="-312"/></transition><transition><source ref="id37"/><target ref="id32"/><label kind="select" x="-1256" y="-408">R: int[0,comb_total-1]</label><label kind="guard" x="-1256" y="-384">mix_i&lt;mixes</label><label kind="assignment" x="-1256" y="-352">curr=0,
chosen=comb[R]</label><nail x="-1264" y="-312"/><nail x="-1264" y="-416"/></transition></template><template><name>Corr_Mteller</name><declaration>const int mt_id = 0;

meta int[0,v_total] rand_ptr = 0;
meta int[0,z_order - 2] vec_r[2][v_total]; // vector of random values for re-encr 
meta int[0,5] perm_i[2];

bool odd_mix = true;

const int mycol[2] = { 1+mt_id*2, 1+mt_id*2+1 };

void do_mixing(){ // place corrupted action here
  b_j col = mycol[odd_mix ? 0:1];

  for(i:b_i){
    int pi = P_b[ perm_i[odd_mix ? 0:1] ][i];

    board[col][pi].y1 = board[col - 1][i].y1 * zpow(pk.a, vec_r[odd_mix ? 0:1][i]) % z_order;
    board[col][pi].y2 = board[col - 1][i].y2 * zpow(pk.b, vec_r[odd_mix ? 0:1][i]) % z_order;
  }
}
</declaration><location id="id38" x="112" y="120"><name x="80" y="128">audit</name></location><location id="id39" x="192" y="0"><name x="192" y="8">end</name></location><location id="id40" x="32" y="0"><name x="8" y="16">even</name><committed/></location><location id="id41" x="-128" y="0"><name x="-136" y="16">odd</name><committed/></location><location id="id42" x="-288" y="0"><name x="-312" y="16">wait</name></location><location id="id43" x="-448" y="0"><name x="-464" y="16">idle</name></location><init ref="id43"/><transition><source ref="id38"/><target ref="id39"/></transition><transition><source ref="id40"/><target ref="id38"/></transition><transition><source ref="id40"/><target ref="id39"/><label kind="select" x="64" y="-40">rand:int[0,5]</label><label kind="guard" x="64" y="-24">rand_ptr==v_total</label><label kind="assignment" x="64" y="0">perm_i[0]=rand,
do_mixing(),
rand_ptr=0</label></transition><transition><source ref="id41"/><target ref="id40"/><label kind="select" x="-104" y="-40">rand: int[0,5]</label><label kind="guard" x="-104" y="-24">rand_ptr==v_total</label><label kind="assignment" x="-104" y="0">perm_i[0]=rand,
do_mixing(),
rand_ptr=0</label></transition><transition><source ref="id40"/><target ref="id40"/><label kind="select" x="-32" y="-136">rand: int[0,z_order-2]</label><label kind="guard" x="-32" y="-152">rand_ptr&lt;v_total</label><label kind="assignment" x="-32" y="-120">vec_r[1][rand_ptr++]=rand</label><nail x="96" y="-96"/><nail x="-32" y="-96"/></transition><transition><source ref="id41"/><target ref="id41"/><label kind="select" x="-208" y="-136">rand: int[0,z_order-2]</label><label kind="guard" x="-208" y="-152">rand_ptr&lt;v_total</label><label kind="assignment" x="-208" y="-120">vec_r[0][rand_ptr++]=rand</label><nail x="-64" y="-96"/><nail x="-192" y="-96"/></transition><transition><source ref="id42"/><target ref="id41"/><label kind="guard" x="-256" y="-24">mixes==mt_id</label><label kind="assignment" x="-256" y="0">rand_ptr=0</label></transition><transition><source ref="id43"/><target ref="id42"/><label kind="synchronisation" x="-408" y="-24">m_phase?</label></transition></template><system>// Place template instantiations here.

// List one or more processes to be composed into a system.

system Sys, Voter, Coercer, Mteller, Dteller;</system></nta>